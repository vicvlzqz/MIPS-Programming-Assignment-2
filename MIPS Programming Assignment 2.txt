#MIPS Programming Assignment 2 - Como Org I Fall 2017
#Victoria Velazquez

.data														 #declare variables
	str1: .space 1001        							 	 #allocating space in memory
	temp_str: .space 1001
	comma: .ascii ","
	nan_error_msg: .ascii "NaN"
	large_error_msg: .ascii "too large"
	newline: .ascii "\n"
	
.text 														  #where code is being executed
		
main:
	la $a0, str1 								    	 	 #making variable to store user input
	li $a1, 1001 											 #limits amount of characters
	li $v0, 8												 #loads syscall that reads user input for strings
	add $s0,$zero,$a0                                        #load input into register
	syscall
	add $t3,$zero,$s0                                    	 #storing input value in register
	move $s0, $zero                        #resetting $s0                                     
loop_through_input:
	move $t4,$zero                                       	 #resetting $t4
	j check_for_validity                                     #call subprogram, validate, returns substr
substr_process:
	addi $s0, $s0, 1                               #increment counter to iterate through input
	add $t4,$v0,$zero                                    #storing return value of valid substr
	lb $t6,0($t4)                                        #load byte of str		beq $t6,$zero,loop_through_input                     #if substr was NaN go to next substr
	beq $t6,24,loop_through_input                        #if too large go to next substr
	add $a0,$t4,$zero                                    #add parameter for subprogram2 
	jal subprogram_2                                     #call subprogram2
subprogram_2_output:  
	lw $s2, 0($sp)                                       #read value from subprogram2
	addi $sp, $sp, 4                                     #account for spaces
	beq $s2,-3, not_a_number                                   #if string is NaN
connect_to_sub3:
	sw $s2,0($sp)                                        #store subprogram3
	jal subprogram_3                                     #root to subprogram3
	j loop_through_input                                 #loops to check next substring
not_a_number:
	bne $t5, 10, loop_through_input                      #does string qualify?
	bne $t5, $zero, loop_through_input                   #continue to loop
exit1:
	li $v0,10                     						 #terminate execution     
	syscall													#sum 
is_nan:
	la $a0,nan_error_msg                  #load invalid input
	li $v0,4                     #add to be printed with other substr 
	syscall
	beq $t5,10,exit2          #if new line, exit
	beq $t5,$zero,exit2       #if null, exit
	beq $t5,44,apply_comma         #print comma like in the input
	addi $t3,$t3,1               #change current byte
	lb $t6,0($t3)                #load next byte of string
	beq $t6,10,exit2          #if new line, exit
	beq $t6,$zero,exit2       #if null, exit
apply_comma:	
	li $v0,11                    #print char
	li $a0, ','                  #add comma to substr
	syscall	
exit2:
	lb $t5, 0($t3)               #keeping track of current char
	beq $t5, 10, exit1             #f char is new line, exit
	beq $t5, $zero, exit1          #if char is null, exit
	addi $s6, $t3, -2
	lb $s6, 0($t3)
	beq $s6, 44, jump
	addi $t3,$t3,1               #move to next substr
jump:
	jr $ra	                     
		
is_too_large:
	la $a0,large_error_msg                  #load too large string
	li $v0,4                     #add to be printed with other substr
	syscall
	beq $t5,10,exit2          #if new line, exit
	beq $t5,$zero,exit2       #if null, exit
	beq $t5,44,apply_comma         #add comma to substr
	addi $t3,$t3,1               #change current byte
	lb $t6,0($t3)                #go to next char
	beq $t6,10,exit2          #if new line, exit
	beq $t6,$zero,exit2       #if null, exit
subprogram_1:
	#ASCII: *<0<9<*<A<F<*<a<f*<*
	#Decimal: *<48<57<*<65<70<*<97<102<*
	lb $t0, 0($s0) 									#loads a byte from the string array 
	beq $t0, 0, exit2 											#if char is null, exit
	beq $t0, 10, exit2 										#if char is newline, exit
	beq $t0, 44, exit2										#if char is a comma, exit
	beq $t2, 9, large_error_msg 				#if string is more than 8 characters	
	addi $s0, $s0, 1 			#iterating through string array/increase to next byte
	sub $s5, $s5, 4 								#keeping track of shift amount

	blt $t0, 48, nan_error_msg 								#if char is less than 0
	blt $t0, 58, is_number 								    #if char is less than 9
	blt $t0, 65, nan_error_msg 								#if char is less than A
	blt $t0, 71, is_uppercase 								#if char is less than F
	blt $t0, 97, nan_error_msg 								#if char is less than a
	blt $t0, 103, is_lowercase 								#if char is less than f
	bgt $t0, 102, nan_error_msg 						 #if char is greater than f
	j subprogram_1
exit2:
invalid:
	li $v0, 4														#calling function to print a string
	la $a0, error_msg 												#print error msg
	syscall 
	li $v0, 10 														#terminate execution
	syscall

is_number:
	addi $t0, $t0, -48  											#convert to decimal
	sllv $t0, $t0, $s5 												#shifting
	add $s6, $t0, $s6 												#adding to sum
	j loop_for_validity

is_uppercase:
	addi $t0, $t0, -55												#convert to decimal
	sllv $t0, $t0, $s5 												#shifting
	add $s6, $t0, $s6 												#adding to sum
	j loop_for_validity

is_lowercase:
	addi $t0, $t0, -87 												#convert to decimal
	sllv $t0, $t0, $s5 												#shifting
	add $s6, $t0, $s6 												#adding to sum
	j subprogram_2

convert:
	li $t3, 10000 													#assigning 10000 to address
	divu $s6, $t3 											#dividing sum by 10000 to convert from two's complement 
	mflo $t4														#remainder
	mfhi $t5														#quotient

	li $v0, 1 														#calling function to print a integar
	add $a0, $t4, $0 												#printing remainder
	syscall
	li $v0, 1 														#calling function to print a integar
	add $a0, $t5, $0 												#printing quotient
	syscall


subprogram_2:
calls sub1 to get decimal value of each character

exit3:

subprogram_3:

exit4:
