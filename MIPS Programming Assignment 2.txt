#MIPS Programming Assignment 2 - Como Org I Fall 2017
#Victoria Velazquez

.data 																#declare variables
	str1: .space 1001 										#allocating space in memory
	large_error_msg: .ascii "too large."
	nan_error_msg: .ascii "NaN."
	newline: .ascii "\n"

.text  													#where code is 	being executed

main:
	la $a0, str1 								    #making variable to store user input
	li $a1, 1001 											#limits amount of characters
	li $v0, 8							#loads syscall that reads user input for strings
	syscall 
	li $t1, 0									 #start of string/length set to 0
	li $t2, 0									 #sum of character count/length set to 0
loop_for_character_count:
	lb $t0, 0($a0) 									#loads a byte from the string array 
	beq $t0, 0, exit1 											#if char is null, exit
	beq $t0, 10, exit1										#if char is newline, exit
	beq $t0, 44, exit1						#if char is a comma, exit
	addi $a0, $a0, 1 			#iterating through string array/increase to next byte
	addi $t2, $t2, 1												#add to sum
	j loop_for_character_count
exit1:
	ble $t1, 0, nan_error_msg 								 #checking for empty string
	#la $s0, str1
	#li $t2, 4
	#mult $t1, $t2 												#multiply length times 4
	#mflo $s5											#shift amount using shift method
	#li $s6, 0 														#sum 
subprogram_1:
	#ASCII: *<0<9<*<A<F<*<a<f*<*
	#Decimal: *<48<57<*<65<70<*<97<102<*
	lb $t0, 0($s0) 									#loads a byte from the string array 
	beq $t0, 0, exit2 											#if char is null, exit
	beq $t0, 10, exit2 										#if char is newline, exit
	beq $t0, 44, exit2										#if char is a comma, exit
	beq $t2, 9, large_error_msg 				#if string is more than 8 characters	
	addi $s0, $s0, 1 			#iterating through string array/increase to next byte
	sub $s5, $s5, 4 								#keeping track of shift amount

	blt $t0, 48, nan_error_msg 								#if char is less than 0
	blt $t0, 58, is_number 								    #if char is less than 9
	blt $t0, 65, nan_error_msg 								#if char is less than A
	blt $t0, 71, is_uppercase 								#if char is less than F
	blt $t0, 97, nan_error_msg 								#if char is less than a
	blt $t0, 103, is_lowercase 								#if char is less than f
	bgt $t0, 102, nan_error_msg 						 #if char is greater than f
	j subprogram_1
exit2:
invalid:
	li $v0, 4														#calling function to print a string
	la $a0, error_msg 												#print error msg
	syscall 
	li $v0, 10 														#terminate execution
	syscall

is_number:
	addi $t0, $t0, -48  											#convert to decimal
	sllv $t0, $t0, $s5 												#shifting
	add $s6, $t0, $s6 												#adding to sum
	j loop_for_validity

is_uppercase:
	addi $t0, $t0, -55												#convert to decimal
	sllv $t0, $t0, $s5 												#shifting
	add $s6, $t0, $s6 												#adding to sum
	j loop_for_validity

is_lowercase:
	addi $t0, $t0, -87 												#convert to decimal
	sllv $t0, $t0, $s5 												#shifting
	add $s6, $t0, $s6 												#adding to sum
	j subprogram_2

convert:
	li $t3, 10000 													#assigning 10000 to address
	divu $s6, $t3 											#dividing sum by 10000 to convert from two's complement 
	mflo $t4														#remainder
	mfhi $t5														#quotient

	li $v0, 1 														#calling function to print a integar
	add $a0, $t4, $0 												#printing remainder
	syscall
	li $v0, 1 														#calling function to print a integar
	add $a0, $t5, $0 												#printing quotient
	syscall


subprogram_2:
calls sub1 to get decimal value of each character

exit3:

subprogram_3:

exit4:
